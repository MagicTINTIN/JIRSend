@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class APIControllerActions {
  + APIControllerActions(MainController): 
  + signalError(String): void
  + signalErrorAndStop(String, int): void
  + isUsernameAvailable(String, JIRSendModInformation): boolean
   username: String
   connectedUsernames: ArrayList<String>
}
class App {
  + App(): 
  + main(String[]): void
}
class BaseUser {
  # BaseUser(MainController, String, userType): 
  + getConversation(String): Conversation
  + markConversationRead(String): void
  + getConversationUnreadNb(String): int
  - retrieveConversationsFromDB(): void
  + addToConversation(String, Message, boolean): void
  + addToConversation(String, Message): void
   totalUnread: int
   type: userType
   username: String
   currentConversationIP: String
   currentConversationName: String
}
class Conversation {
  + Conversation(): 
  + Conversation(Message): 
  + Conversation(ArrayList<Message>): 
  + incrUnread(): void
  + numberUnRead(): int
  + putMessage(Message): void
   unread: int
   messages: ArrayList<Message>
}
class DataPipe<T> {
  + DataPipe(String): 
  + subscribe(Subscription<T>): void
  + put(T): void
  + toString(): String
   name: String
}
interface JIRSendMod << interface >> {
  + changeUsername(String): void
  + initialize(ModController): void
  + stop(): void
  + connected(): void
  + isUsernameAvailable(String): boolean
  + sendMessage(String, String): void
   modInformation: JIRSendModInformation
}
class LocalDatabase {
  + LocalDatabase(): 
  + LocalDatabase(String): 
  + updateContactInDB(IDandUsername): void
  + insertMessageInDB(DatabaseMessage): void
  + selectQuery(String): ArrayList<Row>
  + toString(): String
  + modifyQuery(String, ArrayList<Object>): int
  - insertContactInDB(IDandUsername): int
  + getMessagesFromContact(String): ArrayList<DatabaseMessage>
  + modifyQuery(String): int
  + isDBContactUpdatable(String): boolean
  + markMessagesRead(String): void
  + connect(): boolean
  - updateMessageAuthorInDB(IDandUsername): void
  + selectQuery(String, ArrayList<Object>): ArrayList<Row>
  - getOccurenceInString(String, String): int
   DBContacts: ArrayList<IDandUsername>
   connected: boolean
   allMessagesFromDB: ArrayList<DatabaseMessage>
}
class MainAbstractView {
  + MainAbstractView(): 
  + open(): void
  + start(): void
}
class MainController {
  + MainController(String, boolean): 
  + MainController(boolean): 
  + getConversationUnreadNumber(String): int
  + isDBContactUpdatable(String): boolean
  + getUserEntryIfExists(String): UserEntry
  + getUsernameFromIP(String): String
  + isConnected(String): boolean
  + stoppingApp(): void
  + getMessagesFromContact(String): ArrayList<DatabaseMessage>
  + getConversationLastMessage(String): Message
  + stoppingApp(int): void
  + getConversationIP(String): String
  + isUsernameAvailableMod(String, String): boolean
  + markConversationRead(String): void
  + sendMessageToMod(String, String): void
  + getIPFromUsername(String): String
  + getConversation(String): Conversation
  + getContactFromModUser(ModUser): String
  + getContactFromModMessage(ModMessage): String
  - setupLink(): void
  + startUI(): void
  + statusConverter(Status): Status
  + isUsernameAvailableLocal(String): boolean
  + stopNet(): void
  + changeUsername(String): String
  + getContactFromModUser(String): ModIDAndUserID
   conversation: Conversation
   conversationIcon: ImageIcon
   conversationName: String
   time: String
   allMessagesFromDB: ArrayList<DatabaseMessage>
   numberConnected: int
   connectedUsernames: ArrayList<String>
   usingGUI: boolean
   name: String
   totalUnread: int
   DBContacts: ArrayList<IDandUsername>
   contacts: ArrayList<UserEntry>
   username: String
   conversationIP: String
}
class Message {
  + Message(String, String, String, String): 
  + Message(String, String, String, String, boolean): 
}
class ModController {
  + ModController(String, ModControllerActions): 
  + ModController(ModControllerActions): 
  + sendMessageViaMod(String, String, String): void
  + nowConnected(): void
  + initializeMods(): void
  + isUsernameAvailable(String): boolean
  + changeUsername(String): void
  + stop(): void
   name: String
   modsInformation: ArrayList<JIRSendModInformation>
}
class ModLoader {
  + ModLoader(): 
  + loadMods(): List<JIRSendMod>
  - findImplementingClasses(URLClassLoader): List<Class<?>>
}
class Net {
  + Net(MainController, VoidCallback, boolean): 
  + Net(MainController, VoidCallback): 
  - broadcast(String): void
  + stop(): void
  + getUserEntryIfExist(String): UserEntry
  + printHashMap(): void
  - addDBContacts(): void
  - lostContact(String): void
  + getIpFromUsername(String): String
  + usernameAvailable(String): String
  + usernameAvailable(String, String): boolean
  - contactDBUpdate(String, String): void
  + updateContacts(String, UserEntry): void
  + contactsChangePut(String): void
  - isUsernameValid(String): String
  - send(String, String): boolean
  + sendGoingOfflineMessage(): void
   hashMap: HashMap<String, UserEntry>
   userEntries: ArrayList<UserEntry>
}
class NetCallback {
  + NetCallback(): 
  + execute(InetAddress, int, String, boolean, boolean): void
}
class NetworkIO {
  + NetworkIO(NetCallback, VoidCallback, boolean): 
  + NetworkIO(NetCallback, VoidCallback): 
  + stop(): void
  + broadcast(String): void
  + sendUDP(String, String): boolean
  + send(String, String): boolean
  - sendAck(InetAddress, int, String): void
}
class Pipe<T> {
  + Pipe(String): 
  + subscribe(Subscription<T>): void
  + safePut(T): void
  + toString(): String
  + put(T): void
   name: String
}
interface Subscription<T> << interface >> {
  + get(T): void
}
class TCPClient {
  # TCPClient(Socket, NetCallback): 
  + TCPClient(String, int, NetCallback): 
  + hasFailedToStart(): boolean
  + send(String): boolean
  + close(): void
}
class TCPServer {
  + TCPServer(int, NetCallback, VoidCallback): 
  + send(String, String): boolean
  + stop(): void
}
class UDPReceiver {
  + UDPReceiver(int, NetCallback): 
  + start(): void
  + stop(): void
  - recverLoop(): void
   localAddr: String
}
class UDPSender {
  + UDPSender(int, int): 
  # send(InetAddress, int, String): void
  + broadcastNoHeader(String): void
  + stop(): void
  + sendAndWaitForAck(String, int, String, int, int): boolean
  + broadcast(String): void
}
class User {
  + User(MainController, String): 
  + User(MainController): 
}
class UserEntry {
  + UserEntry(Status, String, ImageIcon): 
  + UserEntry(Status, String): 
  + toString(): String
  + online(): boolean
}

APIControllerActions "1" *-[#595959,plain]-> "mainController\n1" MainController       
BaseUser             "1" *-[#595959,plain]-> "controller\n1" MainController       
Conversation         "1" *-[#595959,plain]-> "messages\n*" Message              
MainController       "1" *-[#595959,plain]-> "apiActions\n1" APIControllerActions 
MainController       "1" *-[#595959,plain]-> "user\n1" BaseUser             
MainController       "1" *-[#595959,plain]-> "db\n1" LocalDatabase        
MainController       "1" *-[#595959,plain]-> "view\n1" MainAbstractView     
MainController       "1" *-[#595959,plain]-> "modc\n1" ModController        
MainController       "1" *-[#595959,plain]-> "net\n1" Net                  
MainController       "1" *-[#595959,plain]-> "lostContact\n1" Pipe                 
ModController        "1" *-[#595959,plain]-> "contactChange\n1" DataPipe             
Net                  "1" *-[#595959,plain]-> "controller\n1" MainController       
Net                  "1" *-[#595959,plain]-> "netIO\n1" NetworkIO            
NetworkIO            "1" *-[#595959,plain]-> "callback\n1" NetCallback          
NetworkIO            "1" *-[#595959,plain]-> "TCP_SERVER\n1" TCPServer            
NetworkIO            "1" *-[#595959,plain]-> "RCV\n1" UDPReceiver          
NetworkIO            "1" *-[#595959,plain]-> "SND\n1" UDPSender            
Pipe                 "1" *-[#595959,plain]-> "subs\n*" Subscription         
TCPClient            "1" *-[#595959,plain]-> "callback\n1" NetCallback          
TCPServer            "1" *-[#595959,plain]-> "callback\n1" NetCallback          
TCPServer            "1" *-[#595959,plain]-> "table\n*" TCPClient            
UDPReceiver          "1" *-[#595959,plain]-> "callback\n1" NetCallback          
User                  -[#000082,plain]-^  BaseUser             
@enduml
